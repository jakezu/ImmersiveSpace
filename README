realXtend based immersive space script.

This script is used to create the immersive space of six invidual client machines.
ScriptImporter jsmodule is needed to import this file into the existing scene.


Below are some tips how you can use this script in existing scenes.


Server:
Server is responsible for the hosting scene to the clients and for the creating the entity which serves offsets to the clients' cameras.
Let's say that server's ip-address is "192.168.1.10", port is "2345", scene file is "scene.txml" and Apache HTTP Server is used to share scene directory (DemoScene) to the clients.
- make scene directory available for the client machines 
    * edit Apache httpd.conf file: 
      <Directory "<DocumentRoot>/DemoScene"> 
         Options.... 
      </Directory>

You can start Tundra server and import ImmersiveSpace.js to the scene by two different ways:

1)
- enable ScriptImporter: open plugins.xml for editing and add <jsplugin path="ScriptImporter/ScriptImporter.js" />
- copy ImmersiveSpace.js, server.js, masterclient.js and slaveclients.js files to the scene directory
- start Tundra server: tundra --server --file <URL or path to scene directory>/scene.txml
- drag and drop ImmersiveSpace.js file into the tundra window

2)
- copy ImmersiveSpace.js, server.js, masterclient.js and slaveclients.js files to the scene directory
- run Tundra with "--run ScriptImporter\ScriptImporter.js" command line argument (no need to enable ScriptImporter in plugins.xml)
- start Tundra server: tundra --server --file <URL or path to scene directory>/scene.txml --run ScriptImporter\ScriptImporter.js
- drag and drop ImmersiveSpace.js file into the tundra window



Master client:
This client is responsible for the input commands (camera moving and rotating), and sending other control messages to the server and the slave clients. Plug input devices (e.g. keyboard and mouse) to this computer.
Valid username for the master client is "client1".
- no need to enable ScriptImporter jsmodule
- make local directory for the assets (for example c:\data\assets\)
- connect to the Tundra server: 
    tundra --login tundra://192.168.1.10:2345/?username=client1 --storage "src=http://192.168.1.10/DemoScene/;localdir=c:\data\assets\;name=web"



Slave clients:
These clients just connects to the server and get's their camera offsets and other control messages from the server and Master client.
Valid username for the slave clients are "client2" ... "client6".
- no need to enable ScriptImporter jsmodule
- make local directory for the assets (for example c:\data\assets\)
- connect to the Tundra server: 
    tundra --login tundra://192.168.1.10:2345/?username=<clientID> --storage "src=http://192.168.1.10/DemoScene/;localdir=c:\data\assets\;name=web"


